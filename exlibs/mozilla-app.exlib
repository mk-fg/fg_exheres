# Copyright 2011-2014 Quentin "Sardem FF7" Glidic <sardemff7@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

myexparam application
myexparam branding
myexparam -b comm=false

exparam -v MOZ_APPLICATION application
exparam -v MOZ_BRANDING branding

require python flag-o-matic

if ever is_scm; then
	MOZ_HG_BASE_URI="http://hg.mozilla.org"

	# Default to mozilla-central, you may want
	# to use mozilla-aurora
	MOZ_HG_MODULE_XULRUNNER=releases/mozilla-aurora
	MOZ_HG_MODULE_DOM_INSPECTOR=dom-inspector

	MOZ_HG_MODULE_COMM=${MOZ_HG_MODULE_XULRUNNER/mozilla/comm}
	MOZ_HG_MODULE_LDAP_SDKS=projects/ldap-sdks
	MOZ_HG_MODULE_VENKMAN=venkman
	MOZ_HG_MODULE_IRC=chatzilla

	SCM_CHECKOUT_TO=moz_xulrunner
	SCM_UNPACK_TO="${WORKBASE}"/moz_xulrunner
	SCM_REPOSITORY=${MOZ_HG_BASE_URI}/${MOZ_HG_MODULE_XULRUNNER}
	SCM_moz_dom_inspector_REPOSITORY=${MOZ_HG_BASE_URI}/${MOZ_HG_MODULE_DOM_INSPECTOR}

	SCM_moz_comm_REPOSITORY=${MOZ_HG_BASE_URI}/${MOZ_HG_MODULE_COMM}
	SCM_moz_ldap_sdks_REPOSITORY=${MOZ_HG_BASE_URI}/${MOZ_HG_MODULE_LDAP_SDKS}
	SCM_moz_venkman_REPOSITORY=${MOZ_HG_BASE_URI}/${MOZ_HG_MODULE_VENKMAN}
	SCM_moz_irc_REPOSITORY=${MOZ_HG_BASE_URI}/${MOZ_HG_MODULE_IRC}

	exparam -b comm && SCM_SECONDARY_REPOSITORIES="moz_comm moz_ldap_sdks ${SCM_SECONDARY_REPOSITORIES}"
	SCM_SECONDARY_REPOSITORIES="dom-inspector? ( moz_dom_inspector ) ${SCM_SECONDARY_REPOSITORIES}"

	require autotools [ supported_autoconf=[ 2.1 ] supported_automake=[ none ] ]
	require scm-hg

	# It is really quicker and we do not need a full repo here
	scm-hg_do_unpack() {
		scm-hg_hg archive \
			--rev=$(scm-hg_revision_spec) \
			"$(scm_get_var UNPACK_TO)"
	}
fi

export_exlib_phases src_configure src_install

LICENCES="MPL-2.0"
SLOT="0"

MYOPTIONS="
	dbus
	dom-inspector [[ description = [ Build and install the DOM Inspector extension ] ]]
	gstreamer [[ description = [ Allow using gstreamer to play html5 <video> and <audio> ] ]]
	gtk3
	pulseaudio
	raw [[ description = [ RAW image formats ] ]]
	startup-notification
	wifi
"
if exparam -b comm; then
	MYOPTIONS+="
		lightning [[ description = [ Install the calendar extension Lightning ] ]]
	"
fi

if ! ever is_scm; then
	MYOPTIONS+="
		bindist [[ description = [ Disable official branding, allowing binary redistribution ] ]]
	"
fi

DEPENDENCIES="
	build:
		app-arch/zip
		dev-lang/python:*[>=2.5&<3][sqlite]
		dev-lang/yasm[>=1.1]
		dev-python/ply
		virtual/pkg-config
	build+run:
		app-arch/unzip
		app-spell/hunspell[>=1.2]
		dev-libs/expat
		dev-libs/glib:2
		dev-libs/icu
		dev-libs/libevent[>=1.4.7]
		dev-libs/libffi
		dev-libs/libIDL[>=0.8.0]
		media-libs/libvpx[>=1.0.0]
		sys-devel/binutils[>=2.16.1]
		sys-libs/zlib[>=1.1.4]
		sys-sound/alsa-lib
		x11-libs/cairo[X][>=1.10.2]
		x11-libs/libXmu
		x11-libs/libXrender
		x11-libs/libXt
		x11-libs/pango[>=1.10.1]
		x11-libs/pixman

		dbus? ( dev-libs/dbus-glib[>=0.72] )
		gstreamer? (
			media-libs/gstreamer:1.0[>=1.0]
			media-plugins/gst-plugins-base:1.0[>=1.0]
		)
		gtk3? ( x11-libs/gtk+:3 )
		!gtk3? ( x11-libs/gtk+:2[>=2.14.0] )
		startup-notification? ( x11-libs/startup-notification )
		wifi? ( net-wireless/wireless_tools )
	recommendation:
		x11-libs/libnotify [[ description = [ Provide system integrated notification ] ]]
"

WORK="${WORKBASE}"/build

# Needed for comm
# Should be fixed upstream
DEFAULT_SRC_COMPILE_PARAMS=(
	MKDIR=mkdir
)

if ever is_scm; then
	export_exlib_phases src_unpack src_prepare

	if exparam -b comm; then
		ECONF_SOURCE="${WORKBASE}"/moz_comm
	else
		ECONF_SOURCE="${WORKBASE}"/moz_xulrunner
	fi

	mozilla-app_src_unpack() {
		scm_src_unpack
		option dom-inspector && edo mv "${WORKBASE}"/moz_dom_inspector "${WORKBASE}"/moz_xulrunner/extensions/inspector
		edo mkdir "${WORK}"

		if exparam -b comm; then
			edo mv "${WORKBASE}"/moz_xulrunner "${WORKBASE}"/moz_comm/mozilla
			edo mv "${WORKBASE}"/moz_ldap_sdks "${WORKBASE}"/moz_comm/ldap/sdks
		fi
	}

	mozilla-scm_patch_baseconfig() {
		# Exherbo install dirs
		edo sed -i \
			-e "/^installdir/ c installdir = /usr/${LIBDIR}/${PN}" \
			-e "/^includedir/ c includedir = /usr/include/${PN}" \
			-e "/^idldir/ c idldir = /usr/share/idl/${PN}" \
			-e "/^sdkdir/ c sdkdir = /usr/${LIBDIR}/${PN}-devel" \
			config/baseconfig.mk
	}

	mozilla-app_src_prepare() {
		edo pushd "${ECONF_SOURCE}"

		default

		if exparam -b comm; then
			mozilla-scm_patch_baseconfig

			eautoconf

			edo popd
			edo pushd "${ECONF_SOURCE}"/mozilla
		fi

		mozilla-scm_patch_baseconfig

		# Force symbols file to be regenerated
		edo sed -i \
			-e '/MAPFILE =/s/def/sym/' \
			security/nss/lib/ckfw/builtins/manifest.mn \
			security/nss/lib/ckfw/capi/manifest.mn \
			security/nss/lib/ckfw/nssmkey/manifest.mn \
			security/nss/lib/nss/manifest.mn \
			security/nss/lib/ssl/manifest.mn \
			security/nss/lib/util/manifest.mn \
			security/nss/lib/smime/manifest.mn \
			security/nss/lib/freebl/manifest.mn \
			security/nss/lib/sqlite/manifest.mn \
			security/nss/lib/softoken/legacydb/manifest.mn \
			security/nss/lib/softoken/manifest.mn

		# Avoid failures when nothing to remove (.pyc)
		edo sed -i \
			-e 's/xargs rm/xargs rm -f/' \
			toolkit/mozapps/installer/packager.mk

		edo sed -i \
			-e '/GCC_TREAT_WARNINGS_AS_ERRORS/s/YES/NO/' \
			media/webrtc/trunk/build/common.gypi

		eautoconf

		edo pushd js/src

		edo mkdir .deps

		eautoconf

		edo popd
		edo popd
	}
fi

mozilla-app_src_configure() {
	# Prevent the build system to use any default configuration
	edo touch "${ECONF_SOURCE}"/.mozconfig

	export PKG_SKIP_STRIP=1

	# Optimization CFLAG
	local x opt=-O2
	# Set optimization level based on CFLAGS
	for x in ${CFLAGS} ${CXXFLAGS}; do
		case ${x} in
			-O0|-01|-O2|-O3|-Os) opt=${x} ;;
		esac
	done

	# Now filter -O from CFLAGS/CXXFLAGS to avoid a duplicate in the resulting
	# compile string.
	filter-flags '-O*'

	# Ensure we do not fail on i{3,5,7} processors that support -mavx
	append-flags -mno-avx

	local econf_params=(
		# CFLAGS
		--enable-optimize=${opt}
		--disable-pedantic
		--disable-strip
		--disable-strip-libs
		--disable-install-strip
		--disable-warnings-as-errors

		# We donâ€™t want debug
		--disable-debug
		--disable-debug-symbols
		--disable-tests

		# Exherbo system
		--with-distribution-id=org.exherbo

		# Disable auto-distribution stuff
		--disable-installer
		--disable-updater

		# Use system libs
		# --with-system-jpeg # needs libjpeg-turbo
		--with-system-bz2
		--enable-system-cairo
		--enable-system-ffi
		--enable-system-hunspell
		--with-system-icu
		--with-system-libevent=/usr
		--enable-system-libvpx
		--enable-system-pixman
		--with-system-ply
		--x-includes=/usr/include
		--x-libraries=/usr/${LIBDIR}
		--with-system-zlib

		# Exheres defaults and options
		--enable-chrome-format=omni
		$(option gtk3 --enable-default-toolkit=cairo-gtk3 --enable-default-toolkit=cairo-gtk2)
		--enable-gio
		--enable-ogg
		--enable-opus
		--enable-single-profile
		--enable-svg
		--enable-wave
		--enable-webm
		--disable-crashreporter
		--disable-profilesharing
		--disable-profilelocking
		--disable-gconf
		--disable-websms-backend
		$(option_enable dbus)
		$(option_enable gstreamer gstreamer 1.0)
		$(option_enable pulseaudio)
		$(option_enable raw)
		$(option_enable startup-notification)
		$(option_enable wifi necko-wifi)

		# Application defaults
		--enable-ipc
		--enable-application=${MOZ_APPLICATION}
		--with-default-mozilla-five-home=/usr/${LIBDIR}/${PN}
		$(option dom-inspector --enable-extensions=default,inspector --enable-extensions=default)

		# Basic features
		--enable-crypto
		--enable-tracejit
		--enable-pango
		--enable-mathml
		--enable-safe-browsing
		--enable-storage
		--enable-places
		--enable-places_bookmarks
	)

	if ever is_scm || option bindist; then
		econf_params+=(
			--with-branding=${MOZ_APPLICATION}/branding/${MOZ_BRANDING}
		)
	else
		econf_params+=(
			--enable-official-branding
		)
	fi

	if exparam -b comm; then
		econf_params+=(
			$(option_enable lightning calendar)
		)
	fi

	econf \
		--hates=docdir \
		${econf_params[@]} \
		"$@"
}

mozilla-app_src_install() {
	default

	find "${IMAGE}" -type d -empty -printf "rmdir %P\n" -delete 1>&2

	local branding_path="${ECONF_SOURCE}"/ icon iconsname size

	iconsname=default
	case "${MOZ_APPLICATION}" in
		mail)
			iconsname=mailicon
		;;
	esac

	if ever is_scm || option bindist; then
		branding_path+=${MOZ_APPLICATION}/branding/${MOZ_BRANDING}
	else
		case "${MOZ_APPLICATION}" in
			browser)
				branding_path+=other-licenses/branding/${PN}
			;;
			*)
				branding_path+=${MOZ_APPLICATION}/branding/official
			;;
		esac
	fi

	source "${branding_path}"/configure.sh
	targeticonname="${MOZ_APP_DISPLAYNAME,,}"

	# Install icons
	for size in 16 22 24 32 48 64 72 96 128 256; do
		if [ -f "${branding_path}/${iconsname}${size}.png" ]; then
			insinto /usr/share/icons/hicolor/${size}x${size}/apps
			newins "${branding_path}"/${iconsname}${size}.png ${targeticonname}.png
		fi
		if [ -f "${branding_path}/mozicon${size}.png" ]; then
			insinto /usr/share/icons/hicolor/${size}x${size}/apps
			newins "${branding_path}"/mozicon${size}.png ${targeticonname}.png
		fi
	done

	# Install a 48x48 icon into /usr/share/pixmaps for legacy DEs
	insinto /usr/share/pixmaps
	newins "${branding_path}"/content/icon48.png ${targeticonname}.png

	# Install .desktop for menu entry
	insinto /usr/share/applications
	doins "${FILES}"/${PN}.desktop

	edo sed -i \
		-e "s:@NAME@:${MOZ_APP_DISPLAYNAME}:" \
		-e "s:@ICON@:${targeticonname}:" \
		"${IMAGE}"/usr/share/applications/${PN}.desktop

	option startup-notification || edo sed -i \
		-e '/StartupNotify=true/d' \
		"${IMAGE}"/usr/share/applications/${PN}.desktop

	# Plugins dir
	hereenvd 50${PN} <<EOF
MOZ_PLUGIN_PATH="/usr/${LIBDIR}/${PN}/plugins:/usr/${LIBDIR}/mozilla/plugins:/usr/${LIBDIR}/nsbrowser/plugins:/opt/nsbrowser/plugins"
COLON_SEPARATED="MOZ_PLUGIN_PATH"
EOF

	option dom-inspector && mozilla-app_unpack_extension 'inspector@mozilla.org' mozilla/dist/xpi-stage/inspector*.xpi

	if exparam -b comm; then
		if option lightning; then
			mozilla-app_unpack_extension '{a62ef8ec-5fdc-40c2-873c-223b8a6925cc}' mozilla/dist/xpi-stage/gdata-provider*.xpi
			mozilla-app_unpack_extension calendar-timezones@mozilla.org mozilla/dist/xpi-stage/calendar-timezones*.xpi
			mozilla-app_unpack_extension '{e2fda1a4-762b-4020-b5ad-a41df1933103}' mozilla/dist/xpi-stage/lightning*.xpi
		fi
	fi
}

mozilla-app_unpack_extension() {
	local emid=$1 xpi=$2
	dodir /usr/${LIBDIR}/${PN}/extensions/${emid}
	edo pushd "${IMAGE}"usr/${LIBDIR}/${PN}/extensions/${emid}
	edo unzip "${WORK}"/${xpi}
	edo popd
}
